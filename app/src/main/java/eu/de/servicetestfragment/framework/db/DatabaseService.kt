package eu.de.servicetestfragment.framework.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.sqlite.db.SupportSQLiteDatabase
import eu.de.servicetestfragment.framework.db.note.NoteDao
import eu.de.servicetestfragment.framework.db.note.NoteEntity
import eu.de.servicetestfragment.framework.db.noteProfileCrossRef.NoteProfileCrossRefDao
import eu.de.servicetestfragment.framework.db.noteProfileCrossRef.NoteProfileCrossRefEntity
import eu.de.servicetestfragment.framework.db.profile.ProfileDao
import eu.de.servicetestfragment.framework.db.profile.ProfileEntity
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

// TODO cut out , ProfileWithNotesEntity::class
@Database(entities = [NoteEntity::class, ProfileEntity::class, NoteProfileCrossRefEntity::class], version= 15)
abstract class DatabaseService : RoomDatabase(){

    companion object {

        private const val DATABASE_NAME = "note.db"

        private var instance: DatabaseService? = null
        private val coroutineScope = CoroutineScope(Dispatchers.IO)

        private fun create(context: Context): DatabaseService =
            Room.databaseBuilder(context, DatabaseService::class.java,
                DATABASE_NAME
            )
                //--->  TODO what was this for? .fallbackToDestructiveMigration()
                 // -------------
                // prepopulate the database after onCreate was called
                .addCallback(object : Callback() {
                    override fun onCreate(db: SupportSQLiteDatabase) {
                        super.onCreate(db)
                        // insert the data on the IO Thread
                        coroutineScope.launch {
                        //ioThread {

                            getInstance(context).noteDao().addEntity(PREPOPULATE_DATA)
                           // insertData(PREPOPULATE_DATA)

                            //addEntity
                            //getInstance(context).dataDao().insertData(PREPOPULATE_DATA)
                        }
                    }
                })
                    // ------------

                .build()
        // -----
        val PREPOPULATE_DATA = NoteEntity("1", "Hallo erster Text autogenerated",342,334,1,1)
            //, Data("2", "val 2"))
//-----


        fun getInstance(context: Context): DatabaseService =
            (instance
                ?: create(
                    context
                )).also { instance = it }
    }

    abstract fun noteDao(): NoteDao
    abstract fun profileDao(): ProfileDao
    abstract fun noteProfileCrossRefDao(): NoteProfileCrossRefDao
   // abstract fun profileWithNotesDao(): ProfileWithNotesDao
}